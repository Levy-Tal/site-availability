"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8167],{225:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"development/testing","title":"Testing Guide","description":"Comprehensive testing strategies for Site Availability Monitoring.","source":"@site/docs/development/testing.md","sourceDirName":"development","slug":"/development/testing","permalink":"/site-availability/docs/development/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/Levy-Tal/site-availability/tree/main/docs/docs/development/testing.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Contributing Guide","permalink":"/site-availability/docs/development/contributing"},"next":{"title":"API Overview","permalink":"/site-availability/docs/api/overview"}}');var i=t(4848),r=t(8453);const a={sidebar_position:4},o="Testing Guide",l={},c=[{value:"Testing Philosophy",id:"testing-philosophy",level:2},{value:"Backend Testing",id:"backend-testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Test Utilities",id:"test-utilities",level:3},{value:"Mocking",id:"mocking",level:3},{value:"Running Backend Tests",id:"running-backend-tests",level:3},{value:"Frontend Testing",id:"frontend-testing",level:2},{value:"Unit Tests",id:"unit-tests-1",level:3},{value:"API Tests",id:"api-tests",level:3},{value:"Component Integration Tests",id:"component-integration-tests",level:3},{value:"Running Frontend Tests",id:"running-frontend-tests",level:3},{value:"End-to-End Testing",id:"end-to-end-testing",level:2},{value:"Cypress Setup",id:"cypress-setup",level:3},{value:"E2E Test Examples",id:"e2e-test-examples",level:3},{value:"Visual Regression Testing",id:"visual-regression-testing",level:3},{value:"Performance Testing",id:"performance-testing",level:2},{value:"Load Testing with Artillery",id:"load-testing-with-artillery",level:3},{value:"Benchmark Tests",id:"benchmark-tests",level:3},{value:"Test Data Management",id:"test-data-management",level:2},{value:"Fixtures",id:"fixtures",level:3},{value:"Test Database",id:"test-database",level:3},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"GitHub Actions",id:"github-actions",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Test Organization",id:"test-organization",level:3},{value:"Test Coverage",id:"test-coverage",level:3},{value:"Test Maintenance",id:"test-maintenance",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testing-guide",children:"Testing Guide"})}),"\n",(0,i.jsx)(n.p,{children:"Comprehensive testing strategies for Site Availability Monitoring."}),"\n",(0,i.jsx)(n.h2,{id:"testing-philosophy",children:"Testing Philosophy"}),"\n",(0,i.jsx)(n.p,{children:"Our testing approach follows the testing pyramid:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"       /\\\n      /  \\    E2E Tests (Few)\n     /____\\\n    /      \\  Integration Tests (Some)\n   /________\\\n  /          \\ Unit Tests (Many)\n /____________\\\n"})}),"\n",(0,i.jsx)(n.h2,{id:"backend-testing",children:"Backend Testing"}),"\n",(0,i.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,i.jsx)(n.p,{children:"Test individual functions and methods:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// handlers/handlers_test.go\nfunc TestHealthHandler(t *testing.T) {\n    req := httptest.NewRequest("GET", "/health", nil)\n    w := httptest.NewRecorder()\n\n    HealthHandler(w, req)\n\n    resp := w.Result()\n    if resp.StatusCode != http.StatusOK {\n        t.Errorf("expected status 200, got %d", resp.StatusCode)\n    }\n\n    body, _ := io.ReadAll(resp.Body)\n    if !strings.Contains(string(body), "healthy") {\n        t.Error("expected \'healthy\' in response body")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,i.jsx)(n.p,{children:"Test component interactions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// scraping/integration_test.go\nfunc TestPrometheusIntegration(t *testing.T) {\n    // Start test Prometheus server\n    server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        w.WriteHeader(http.StatusOK)\n        w.Write([]byte(`{"status":"success","data":{"resultType":"vector","result":[{"metric":{"__name__":"up","instance":"localhost:9090","job":"prometheus"},"value":[1609459200,"1"]}]}}`))\n    }))\n    defer server.Close()\n\n    client := prometheus.NewClient(server.URL)\n    result, err := client.Query("up")\n\n    assert.NoError(t, err)\n    assert.NotNil(t, result)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"test-utilities",children:"Test Utilities"}),"\n",(0,i.jsx)(n.p,{children:"Create helper functions for common test scenarios:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// testutil/helpers.go\nfunc SetupTestConfig() *config.Config {\n    return &config.Config{\n        ScrapeInterval: time.Second * 10,\n        LogLevel:       "debug",\n        Port:           8080,\n        Locations: []config.Location{\n            {Name: "Test Location", Latitude: 40.7128, Longitude: -74.0060},\n        },\n        Apps: []config.App{\n            {Name: "test-app", Location: "Test Location", Metric: "up", Prometheus: "http://localhost:9090"},\n        },\n    }\n}\n\nfunc SetupTestServer(config *config.Config) *httptest.Server {\n    handler := setupRoutes(config)\n    return httptest.NewServer(handler)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mocking",children:"Mocking"}),"\n",(0,i.jsx)(n.p,{children:"Use interfaces for easy mocking:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Define interface\ntype PrometheusClient interface {\n    Query(query string) (*QueryResult, error)\n}\n\n// Mock implementation\ntype MockPrometheusClient struct {\n    QueryFunc func(string) (*QueryResult, error)\n}\n\nfunc (m *MockPrometheusClient) Query(query string) (*QueryResult, error) {\n    if m.QueryFunc != nil {\n        return m.QueryFunc(query)\n    }\n    return nil, errors.New("not implemented")\n}\n\n// Test with mock\nfunc TestScraper(t *testing.T) {\n    mockClient := &MockPrometheusClient{\n        QueryFunc: func(query string) (*QueryResult, error) {\n            return &QueryResult{Value: "1"}, nil\n        },\n    }\n\n    scraper := NewScraper(mockClient)\n    result, err := scraper.Scrape("up")\n\n    assert.NoError(t, err)\n    assert.Equal(t, "1", result.Value)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"running-backend-tests",children:"Running Backend Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run all tests\ngo test ./...\n\n# Run tests with coverage\ngo test -cover ./...\n\n# Run tests with race detection\ngo test -race ./...\n\n# Run specific package tests\ngo test ./handlers/\n\n# Generate coverage report\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out -o coverage.html\n"})}),"\n",(0,i.jsx)(n.h2,{id:"frontend-testing",children:"Frontend Testing"}),"\n",(0,i.jsx)(n.h3,{id:"unit-tests-1",children:"Unit Tests"}),"\n",(0,i.jsx)(n.p,{children:"Test React components:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// AppStatusPanel.test.js\nimport { render, screen } from "@testing-library/react";\nimport { AppStatusPanel } from "./AppStatusPanel";\n\ndescribe("AppStatusPanel", () => {\n  test("renders app status correctly", () => {\n    const mockApps = [\n      { name: "app1", status: "up", location: "NYC" },\n      { name: "app2", status: "down", location: "LA" },\n    ];\n\n    render(<AppStatusPanel applications={mockApps} />);\n\n    expect(screen.getByText("app1")).toBeInTheDocument();\n    expect(screen.getByText("app2")).toBeInTheDocument();\n\n    // Check status indicators\n    expect(screen.getByTestId("status-up")).toBeInTheDocument();\n    expect(screen.getByTestId("status-down")).toBeInTheDocument();\n  });\n\n  test("handles loading state", () => {\n    render(<AppStatusPanel applications={null} loading={true} />);\n    expect(screen.getByText(/loading/i)).toBeInTheDocument();\n  });\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"api-tests",children:"API Tests"}),"\n",(0,i.jsx)(n.p,{children:"Mock API calls:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// api.test.js\nimport { getApplications } from "./appStatusAPI";\n\n// Mock fetch\nglobal.fetch = jest.fn();\n\ndescribe("API tests", () => {\n  beforeEach(() => {\n    fetch.mockClear();\n  });\n\n  test("getApplications returns data", async () => {\n    const mockData = [{ name: "app1", status: "up" }];\n\n    fetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => mockData,\n    });\n\n    const result = await getApplications();\n    expect(result).toEqual(mockData);\n    expect(fetch).toHaveBeenCalledWith("http://localhost:8080/api/apps");\n  });\n\n  test("getApplications handles errors", async () => {\n    fetch.mockRejectedValueOnce(new Error("Network error"));\n\n    await expect(getApplications()).rejects.toThrow("Network error");\n  });\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"component-integration-tests",children:"Component Integration Tests"}),"\n",(0,i.jsx)(n.p,{children:"Test component interactions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Map.integration.test.js\nimport { render, screen, waitFor } from "@testing-library/react";\nimport userEvent from "@testing-library/user-event";\nimport { Map } from "./Map";\n\n// Mock D3 and world map data\njest.mock("d3", () => ({\n  select: jest.fn(() => ({\n    append: jest.fn(() => ({ attr: jest.fn() })),\n    selectAll: jest.fn(() => ({ data: jest.fn() })),\n  })),\n}));\n\ndescribe("Map Integration", () => {\n  test("renders map with application markers", async () => {\n    const mockApps = [\n      { name: "app1", status: "up", location: { lat: 40.7128, lon: -74.006 } },\n    ];\n\n    render(<Map applications={mockApps} />);\n\n    await waitFor(() => {\n      expect(screen.getByTestId("world-map")).toBeInTheDocument();\n    });\n\n    // Verify marker is rendered\n    expect(screen.getByTestId("marker-app1")).toBeInTheDocument();\n  });\n\n  test("handles marker click events", async () => {\n    const mockOnMarkerClick = jest.fn();\n    const mockApps = [\n      { name: "app1", status: "up", location: { lat: 40.7128, lon: -74.006 } },\n    ];\n\n    render(<Map applications={mockApps} onMarkerClick={mockOnMarkerClick} />);\n\n    const marker = screen.getByTestId("marker-app1");\n    await userEvent.click(marker);\n\n    expect(mockOnMarkerClick).toHaveBeenCalledWith("app1");\n  });\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"running-frontend-tests",children:"Running Frontend Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm test -- --watch\n\n# Run tests with coverage\nnpm test -- --coverage\n\n# Run specific test file\nnpm test -- AppStatusPanel.test.js\n\n# Update snapshots\nnpm test -- --updateSnapshot\n"})}),"\n",(0,i.jsx)(n.h2,{id:"end-to-end-testing",children:"End-to-End Testing"}),"\n",(0,i.jsx)(n.h3,{id:"cypress-setup",children:"Cypress Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install Cypress\nnpm install --save-dev cypress\n\n# Open Cypress\nnpx cypress open\n"})}),"\n",(0,i.jsx)(n.h3,{id:"e2e-test-examples",children:"E2E Test Examples"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// cypress/e2e/app.cy.js\ndescribe("Site Availability Monitoring", () => {\n  beforeEach(() => {\n    // Start backend server in test mode\n    cy.exec("npm run start:test");\n    cy.visit("http://localhost:3000");\n  });\n\n  it("displays the world map", () => {\n    cy.get(\'[data-testid="world-map"]\').should("be.visible");\n  });\n\n  it("shows application statuses", () => {\n    cy.get(\'[data-testid="sidebar"]\').should("contain", "Applications");\n    cy.get(\'[data-testid="app-list"]\').should("exist");\n  });\n\n  it("updates data in real-time", () => {\n    // Wait for initial load\n    cy.get(\'[data-testid="app-status"]\').should("contain", "up");\n\n    // Mock backend to return different status\n    cy.intercept("GET", "/api/apps", { fixture: "apps-down.json" });\n\n    // Wait for update\n    cy.get(\'[data-testid="app-status"]\', { timeout: 10000 }).should(\n      "contain",\n      "down",\n    );\n  });\n\n  it("handles API errors gracefully", () => {\n    cy.intercept("GET", "/api/apps", { statusCode: 500 });\n\n    cy.get(\'[data-testid="error-message"]\').should(\n      "contain",\n      "Failed to load applications",\n    );\n  });\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"visual-regression-testing",children:"Visual Regression Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// cypress/e2e/visual.cy.js\ndescribe("Visual Regression Tests", () => {\n  it("matches baseline screenshot", () => {\n    cy.visit("http://localhost:3000");\n    cy.get(\'[data-testid="world-map"]\').should("be.visible");\n\n    // Take screenshot and compare\n    cy.matchImageSnapshot("world-map-baseline");\n  });\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,i.jsx)(n.h3,{id:"load-testing-with-artillery",children:"Load Testing with Artillery"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# artillery.yml\nconfig:\n  target: "http://localhost:8080"\n  phases:\n    - duration: 60\n      arrivalRate: 10\n  processor: "./test-functions.js"\n\nscenarios:\n  - name: "API Load Test"\n    flow:\n      - get:\n          url: "/api/apps"\n      - get:\n          url: "/api/locations"\n      - get:\n          url: "/health"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"benchmark-tests",children:"Benchmark Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// benchmark_test.go\nfunc BenchmarkHealthHandler(b *testing.B) {\n    req := httptest.NewRequest("GET", "/health", nil)\n\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        w := httptest.NewRecorder()\n        HealthHandler(w, req)\n    }\n}\n\nfunc BenchmarkPrometheusQuery(b *testing.B) {\n    client := prometheus.NewClient("http://localhost:9090")\n\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        _, err := client.Query("up")\n        if err != nil {\n            b.Fatal(err)\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"test-data-management",children:"Test Data Management"}),"\n",(0,i.jsx)(n.h3,{id:"fixtures",children:"Fixtures"}),"\n",(0,i.jsx)(n.p,{children:"Create reusable test data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// cypress/fixtures/apps.json\n[\n  {\n    name: "frontend",\n    status: "up",\n    location: "New York",\n    last_check: "2023-12-01T10:00:00Z",\n  },\n  {\n    name: "backend",\n    status: "down",\n    location: "London",\n    last_check: "2023-12-01T10:00:00Z",\n  },\n];\n'})}),"\n",(0,i.jsx)(n.h3,{id:"test-database",children:"Test Database"}),"\n",(0,i.jsx)(n.p,{children:"For integration tests requiring data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func setupTestDB(t *testing.T) *sql.DB {\n    db, err := sql.Open("sqlite3", ":memory:")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Run migrations\n    if err := runMigrations(db); err != nil {\n        t.Fatal(err)\n    }\n\n    // Seed test data\n    if err := seedTestData(db); err != nil {\n        t.Fatal(err)\n    }\n\n    return db\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,i.jsx)(n.h3,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/test.yml\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  backend-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: 1.21\n\n      - name: Run backend tests\n        run: |\n          cd backend\n          go test -race -cover ./...\n\n  frontend-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 18\n\n      - name: Install dependencies\n        run: |\n          cd frontend\n          npm ci\n\n      - name: Run frontend tests\n        run: |\n          cd frontend\n          npm test -- --coverage --watchAll=false\n\n  e2e-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run E2E tests\n        run: |\n          docker-compose -f docker-compose.test.yml up --abort-on-container-exit\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"test-organization",children:"Test Organization"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Group related tests in describe blocks"}),"\n",(0,i.jsx)(n.li,{children:"Use clear, descriptive test names"}),"\n",(0,i.jsx)(n.li,{children:"Follow AAA pattern (Arrange, Act, Assert)"}),"\n",(0,i.jsx)(n.li,{children:"Keep tests independent and isolated"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-coverage",children:"Test Coverage"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Aim for 80%+ code coverage"}),"\n",(0,i.jsx)(n.li,{children:"Focus on critical paths"}),"\n",(0,i.jsx)(n.li,{children:"Don't sacrifice quality for coverage"}),"\n",(0,i.jsx)(n.li,{children:"Use coverage reports to find gaps"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-maintenance",children:"Test Maintenance"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keep tests simple and focused"}),"\n",(0,i.jsx)(n.li,{children:"Update tests when code changes"}),"\n",(0,i.jsx)(n.li,{children:"Remove obsolete tests"}),"\n",(0,i.jsx)(n.li,{children:"Refactor test code like production code"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flaky tests"}),": Use proper waits and timeouts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Slow tests"}),": Mock external dependencies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Brittle tests"}),": Avoid testing implementation details"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Incomplete tests"}),": Test error scenarios too"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Remember: Good tests are your safety net for confident refactoring and feature development!"})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);