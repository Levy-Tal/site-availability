"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9594],{4244:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"frontend/overview","title":"Frontend Overview","description":"The Site Availability frontend is a modern React application that provides an interactive world map visualization for monitoring application status across geographic locations.","source":"@site/docs/frontend/overview.md","sourceDirName":"frontend","slug":"/frontend/overview","permalink":"/site-availability/docs/frontend/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/Levy-Tal/site-availability/tree/main/docs/docs/frontend/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Metrics Integration","permalink":"/site-availability/docs/api/metrics"},"next":{"title":"Frontend Components","permalink":"/site-availability/docs/frontend/components"}}');var i=a(4848),r=a(8453);const s={sidebar_position:1},o="Frontend Overview",l={},c=[{value:"Technology Stack",id:"technology-stack",level:2},{value:"Core Technologies",id:"core-technologies",level:3},{value:"Build Tools",id:"build-tools",level:3},{value:"Application Architecture",id:"application-architecture",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Interactive World Map",id:"interactive-world-map",level:3},{value:"Real-time Updates",id:"real-time-updates",level:3},{value:"Status Visualization",id:"status-visualization",level:3},{value:"Component Architecture",id:"component-architecture",level:2},{value:"App.js - Main Application",id:"appjs---main-application",level:3},{value:"Map.js - World Map Component",id:"mapjs---world-map-component",level:3},{value:"Sidebar.js - Status Panel",id:"sidebarjs---status-panel",level:3},{value:"Data Flow",id:"data-flow",level:2},{value:"Application State Management",id:"application-state-management",level:3},{value:"API Integration Flow",id:"api-integration-flow",level:3},{value:"Styling and Theming",id:"styling-and-theming",level:2},{value:"CSS Architecture",id:"css-architecture",level:3},{value:"Responsive Design",id:"responsive-design",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Frontend Configuration",id:"frontend-configuration",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Performance Optimizations",id:"performance-optimizations",level:2},{value:"Component Optimization",id:"component-optimization",level:3},{value:"API Optimization",id:"api-optimization",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Error Boundaries",id:"error-boundaries",level:3},{value:"API Error Handling",id:"api-error-handling",level:3},{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Component Testing",id:"component-testing",level:3},{value:"Accessibility",id:"accessibility",level:2},{value:"ARIA Support",id:"aria-support",level:3},{value:"Keyboard Navigation",id:"keyboard-navigation",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"frontend-overview",children:"Frontend Overview"})}),"\n",(0,i.jsx)(e.p,{children:"The Site Availability frontend is a modern React application that provides an interactive world map visualization for monitoring application status across geographic locations."}),"\n",(0,i.jsx)(e.h2,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,i.jsx)(e.h3,{id:"core-technologies",children:"Core Technologies"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"React 19"}),": Modern React with hooks and functional components"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"D3.js"}),": Data visualization and world map rendering"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"JavaScript (ES6+)"}),": Modern JavaScript features"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"CSS3"}),": Responsive styling and animations"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"build-tools",children:"Build Tools"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Create React App"}),": Development and build tooling"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Webpack"}),": Module bundling (via CRA)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Babel"}),": JavaScript transpilation (via CRA)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"ESLint"}),": Code linting"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Prettier"}),": Code formatting"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"application-architecture",children:"Application Architecture"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"src/\n\u251c\u2500\u2500 components/         # React components\n\u2502   \u251c\u2500\u2500 Map.js         # World map visualization\n\u2502   \u251c\u2500\u2500 Sidebar.js     # Application status sidebar\n\u2502   \u2514\u2500\u2500 AppStatusPanel.js # Individual app status\n\u251c\u2500\u2500 api/               # API integration\n\u2502   \u251c\u2500\u2500 appStatusAPI.js    # Application data\n\u2502   \u251c\u2500\u2500 docsAPI.js         # Documentation\n\u2502   \u2514\u2500\u2500 scrapeIntervalAPI.js # Configuration\n\u251c\u2500\u2500 styles/            # Global styles\n\u2502   \u2514\u2500\u2500 main.css       # Main stylesheet\n\u251c\u2500\u2500 config.js          # Configuration\n\u251c\u2500\u2500 App.js            # Main application\n\u2514\u2500\u2500 index.js          # Entry point\n"})}),"\n",(0,i.jsx)(e.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsx)(e.h3,{id:"interactive-world-map",children:"Interactive World Map"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"SVG-based world map"})," using D3.js"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Real-time status markers"})," showing application availability"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Zoom and pan capabilities"})," for detailed exploration"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Click interactions"})," for application details"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Responsive design"})," that works on all devices"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"real-time-updates",children:"Real-time Updates"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Automatic data refresh"})," every 30 seconds (configurable)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"WebSocket support"})," for instant updates (future)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Error handling"})," with graceful degradation"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Loading states"})," for better user experience"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"status-visualization",children:"Status Visualization"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Color-coded status indicators"}),": Green (up), Red (down), Yellow (unknown)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Location grouping"})," of applications"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Historical data display"})," (when available)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Status change animations"})," for visual feedback"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"component-architecture",children:"Component Architecture"}),"\n",(0,i.jsx)(e.h3,{id:"appjs---main-application",children:"App.js - Main Application"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'const App = () => {\n  const [appStatuses, setAppStatuses] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Data fetching and state management\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, config.updateInterval);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className="app">\n      <Map applications={appStatuses} locations={locations} />\n      <Sidebar applications={appStatuses} loading={loading} error={error} />\n    </div>\n  );\n};\n'})}),"\n",(0,i.jsx)(e.h3,{id:"mapjs---world-map-component",children:"Map.js - World Map Component"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'const Map = ({ applications, locations }) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    if (!applications.length) return;\n\n    // D3.js map rendering logic\n    const svg = d3.select(svgRef.current);\n\n    // Render world map\n    renderWorldMap(svg);\n\n    // Add application markers\n    renderApplicationMarkers(svg, applications);\n  }, [applications, locations]);\n\n  return (\n    <div className="map-container">\n      <svg ref={svgRef} className="world-map"></svg>\n    </div>\n  );\n};\n'})}),"\n",(0,i.jsx)(e.h3,{id:"sidebarjs---status-panel",children:"Sidebar.js - Status Panel"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'const Sidebar = ({ applications, loading, error }) => {\n  const [filter, setFilter] = useState("all");\n  const [sortBy, setSortBy] = useState("name");\n\n  const filteredApps = useMemo(() => {\n    return applications\n      .filter((app) => filter === "all" || app.status === filter)\n      .sort((a, b) => a[sortBy].localeCompare(b[sortBy]));\n  }, [applications, filter, sortBy]);\n\n  if (loading) return <div className="loading">Loading...</div>;\n  if (error) return <div className="error">{error.message}</div>;\n\n  return (\n    <div className="sidebar">\n      <div className="controls">\n        <FilterControls filter={filter} onFilterChange={setFilter} />\n        <SortControls sortBy={sortBy} onSortChange={setSortBy} />\n      </div>\n\n      <div className="app-list">\n        {filteredApps.map((app) => (\n          <AppStatusPanel key={app.name} application={app} />\n        ))}\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,i.jsx)(e.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,i.jsx)(e.h3,{id:"application-state-management",children:"Application State Management"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// State structure\nconst appState = {\n  applications: [\n    {\n      name: "frontend",\n      location: "New York",\n      status: "up",\n      lastCheck: "2023-12-01T10:00:00Z",\n      responseTime: 0.142,\n      coordinates: { latitude: 40.7128, longitude: -74.006 },\n    },\n  ],\n  locations: [\n    {\n      name: "New York",\n      latitude: 40.7128,\n      longitude: -74.006,\n      appsCount: 3,\n    },\n  ],\n  loading: false,\n  error: null,\n};\n'})}),"\n",(0,i.jsx)(e.h3,{id:"api-integration-flow",children:"API Integration Flow"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// Data fetching pattern\nconst fetchApplications = async () => {\n  try {\n    setLoading(true);\n    setError(null);\n\n    const response = await fetch(`${config.apiUrl}/api/apps`);\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    setAppStatuses(data.data || []);\n  } catch (err) {\n    console.error("Failed to fetch applications:", err);\n    setError(err);\n  } finally {\n    setLoading(false);\n  }\n};\n'})}),"\n",(0,i.jsx)(e.h2,{id:"styling-and-theming",children:"Styling and Theming"}),"\n",(0,i.jsx)(e.h3,{id:"css-architecture",children:"CSS Architecture"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:'/* Global variables */\n:root {\n  --primary-color: #1976d2;\n  --secondary-color: #dc004e;\n  --success-color: #4caf50;\n  --error-color: #f44336;\n  --warning-color: #ff9800;\n  --background-color: #f5f5f5;\n  --text-color: #333;\n  --border-radius: 4px;\n  --box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n/* Component-based styling */\n.app {\n  display: flex;\n  height: 100vh;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto",\n    sans-serif;\n}\n\n.map-container {\n  flex: 1;\n  position: relative;\n  background: var(--background-color);\n}\n\n.sidebar {\n  width: 300px;\n  background: white;\n  border-left: 1px solid #ddd;\n  overflow-y: auto;\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"responsive-design",children:"Responsive Design"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:"/* Mobile-first responsive design */\n@media (max-width: 768px) {\n  .app {\n    flex-direction: column;\n  }\n\n  .sidebar {\n    width: 100%;\n    height: 40vh;\n    border-left: none;\n    border-top: 1px solid #ddd;\n  }\n\n  .map-container {\n    height: 60vh;\n  }\n}\n\n@media (max-width: 480px) {\n  .sidebar {\n    height: 50vh;\n  }\n\n  .map-container {\n    height: 50vh;\n  }\n\n  .app-status-panel {\n    padding: 8px;\n    font-size: 14px;\n  }\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(e.h3,{id:"frontend-configuration",children:"Frontend Configuration"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// src/config.js\nconst config = {\n  // API settings\n  apiUrl: process.env.REACT_APP_API_URL || "http://localhost:8080",\n\n  // Update intervals\n  updateInterval: parseInt(process.env.REACT_APP_UPDATE_INTERVAL) || 30000, // 30 seconds\n\n  // Map settings\n  map: {\n    defaultZoom: 2,\n    maxZoom: 10,\n    minZoom: 1,\n    projection: "geoNaturalEarth1",\n  },\n\n  // Theme settings\n  theme: {\n    darkMode: process.env.REACT_APP_DARK_MODE === "true",\n    primaryColor: process.env.REACT_APP_PRIMARY_COLOR || "#1976d2",\n  },\n\n  // Feature flags\n  features: {\n    realTimeUpdates: process.env.REACT_APP_REAL_TIME !== "false",\n    historicalData: process.env.REACT_APP_HISTORICAL === "true",\n    debugMode: process.env.NODE_ENV === "development",\n  },\n};\n\nexport default config;\n'})}),"\n",(0,i.jsx)(e.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# .env file\nREACT_APP_API_URL=http://localhost:8080\nREACT_APP_UPDATE_INTERVAL=30000\nREACT_APP_DARK_MODE=false\nREACT_APP_PRIMARY_COLOR=#1976d2\nREACT_APP_REAL_TIME=true\nREACT_APP_HISTORICAL=false\n"})}),"\n",(0,i.jsx)(e.h2,{id:"performance-optimizations",children:"Performance Optimizations"}),"\n",(0,i.jsx)(e.h3,{id:"component-optimization",children:"Component Optimization"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// Memoized components for performance\nconst AppStatusPanel = React.memo(({ application }) => {\n  return (\n    <div className="app-status-panel">\n      <StatusIndicator status={application.status} />\n      <div className="app-info">\n        <h3>{application.name}</h3>\n        <p>{application.location}</p>\n      </div>\n    </div>\n  );\n});\n\n// Memoized expensive calculations\nconst Map = ({ applications }) => {\n  const processedData = useMemo(() => {\n    return applications.map((app) => ({\n      ...app,\n      coordinates: projectCoordinates(app.coordinates),\n    }));\n  }, [applications]);\n\n  return <MapVisualization data={processedData} />;\n};\n'})}),"\n",(0,i.jsx)(e.h3,{id:"api-optimization",children:"API Optimization"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Debounced API calls\nconst debouncedFetch = useCallback(\n  debounce(() => {\n    fetchApplications();\n  }, 1000),\n  [],\n);\n\n// Efficient state updates\nconst updateApplicationStatus = useCallback((appName, newStatus) => {\n  setAppStatuses((prev) =>\n    prev.map((app) =>\n      app.name === appName\n        ? { ...app, status: newStatus, lastCheck: new Date().toISOString() }\n        : app,\n    ),\n  );\n}, []);\n"})}),"\n",(0,i.jsx)(e.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(e.h3,{id:"error-boundaries",children:"Error Boundaries"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error("Frontend error:", error, errorInfo);\n    // Send to error reporting service\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className="error-boundary">\n          <h2>Something went wrong</h2>\n          <p>\n            Please refresh the page or contact support if the problem persists.\n          </p>\n          <button onClick={() => window.location.reload()}>Refresh Page</button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"api-error-handling",children:"API Error Handling"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// Centralized error handling\nconst handleApiError = (error, operation) => {\n  const errorMessage = {\n    message: `Failed to ${operation}`,\n    details: error.message,\n    timestamp: new Date().toISOString(),\n    operation,\n  };\n\n  // Log error\n  console.error("API Error:", errorMessage);\n\n  // Update UI state\n  setError(errorMessage);\n\n  // Show user notification\n  showNotification(`Error: ${errorMessage.message}`, "error");\n};\n'})}),"\n",(0,i.jsx)(e.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,i.jsx)(e.h3,{id:"component-testing",children:"Component Testing"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'// Example test\nimport { render, screen, waitFor } from "@testing-library/react";\nimport { App } from "./App";\n\n// Mock API\njest.mock("./api/appStatusAPI", () => ({\n  getApplications: jest.fn(() =>\n    Promise.resolve([\n      { name: "test-app", status: "up", location: "Test Location" },\n    ]),\n  ),\n}));\n\ntest("renders application status", async () => {\n  render(<App />);\n\n  await waitFor(() => {\n    expect(screen.getByText("test-app")).toBeInTheDocument();\n  });\n});\n'})}),"\n",(0,i.jsx)(e.h2,{id:"accessibility",children:"Accessibility"}),"\n",(0,i.jsx)(e.h3,{id:"aria-support",children:"ARIA Support"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:'const StatusIndicator = ({ status }) => (\n  <div\n    className={`status-indicator status-${status}`}\n    role="img"\n    aria-label={`Application status: ${status}`}\n    title={`Status: ${status}`}\n  >\n    <span className="sr-only">Status: {status}</span>\n  </div>\n);\n'})}),"\n",(0,i.jsx)(e.h3,{id:"keyboard-navigation",children:"Keyboard Navigation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-css",children:"/* Focus indicators */\n.app-status-panel:focus,\n.map-marker:focus {\n  outline: 2px solid var(--primary-color);\n  outline-offset: 2px;\n}\n\n/* Screen reader only content */\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"The frontend provides a modern, responsive, and accessible interface for monitoring application availability with real-time updates and interactive visualizations."})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>s,x:()=>o});var t=a(6540);const i={},r=t.createContext(i);function s(n){const e=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);