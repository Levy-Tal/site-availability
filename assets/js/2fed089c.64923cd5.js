"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6400],{8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var a=t(6540);const s={},r=a.createContext(s);function i(n){const e=a.useContext(r);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),a.createElement(r.Provider,{value:e},n.children)}},9398:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"frontend/components","title":"Frontend Components","description":"Detailed documentation of React components used in the Site Availability Monitoring frontend.","source":"@site/docs/frontend/components.md","sourceDirName":"frontend","slug":"/frontend/components","permalink":"/site-availability/docs/frontend/components","draft":false,"unlisted":false,"editUrl":"https://github.com/Levy-Tal/site-availability/tree/main/docs/docs/frontend/components.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Frontend Overview","permalink":"/site-availability/docs/frontend/overview"},"next":{"title":"Frontend Configuration","permalink":"/site-availability/docs/frontend/configuration"}}');var s=t(4848),r=t(8453);const i={sidebar_position:2},o="Frontend Components",l={},c=[{value:"Component Hierarchy",id:"component-hierarchy",level:2},{value:"Core Components",id:"core-components",level:2},{value:"App.js - Main Application Container",id:"appjs---main-application-container",level:3},{value:"Map.js - Interactive World Map",id:"mapjs---interactive-world-map",level:3},{value:"Sidebar.js - Application Status Panel",id:"sidebarjs---application-status-panel",level:3},{value:"AppStatusPanel.js - Individual Application Status",id:"appstatuspaneljs---individual-application-status",level:3},{value:"Utility Components",id:"utility-components",level:2},{value:"ErrorBoundary.js - Error Handling",id:"errorboundaryjs---error-handling",level:3},{value:"LoadingSpinner.js - Loading Indicator",id:"loadingspinnerjs---loading-indicator",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"frontend-components",children:"Frontend Components"})}),"\n",(0,s.jsx)(e.p,{children:"Detailed documentation of React components used in the Site Availability Monitoring frontend."}),"\n",(0,s.jsx)(e.h2,{id:"component-hierarchy",children:"Component Hierarchy"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"App\n\u251c\u2500\u2500 Map\n\u2502   \u251c\u2500\u2500 WorldMap\n\u2502   \u251c\u2500\u2500 ApplicationMarker\n\u2502   \u2514\u2500\u2500 Tooltip\n\u251c\u2500\u2500 Sidebar\n\u2502   \u251c\u2500\u2500 AppStatusPanel\n\u2502   \u251c\u2500\u2500 FilterControls\n\u2502   \u2514\u2500\u2500 SortControls\n\u2514\u2500\u2500 ErrorBoundary\n"})}),"\n",(0,s.jsx)(e.h2,{id:"core-components",children:"Core Components"}),"\n",(0,s.jsx)(e.h3,{id:"appjs---main-application-container",children:"App.js - Main Application Container"}),"\n",(0,s.jsx)(e.p,{children:"The root component that manages global state and coordinates data flow."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import React, { useState, useEffect } from "react";\nimport Map from "./Map";\nimport Sidebar from "./Sidebar";\nimport { getApplications, getLocations } from "../api/appStatusAPI";\nimport config from "../config";\n\nconst App = () => {\n  // State management\n  const [appStatuses, setAppStatuses] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdate, setLastUpdate] = useState(null);\n\n  // Data fetching\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const [appsResponse, locationsResponse] = await Promise.all([\n        getApplications(),\n        getLocations(),\n      ]);\n\n      setAppStatuses(appsResponse.data || []);\n      setLocations(locationsResponse.data || []);\n      setLastUpdate(new Date());\n    } catch (err) {\n      console.error("Failed to fetch data:", err);\n      setError(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Auto-refresh data\n  useEffect(() => {\n    fetchData();\n\n    const interval = setInterval(fetchData, config.updateInterval);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Manual refresh handler\n  const handleRefresh = () => {\n    fetchData();\n  };\n\n  return (\n    <div className="app">\n      <Map\n        applications={appStatuses}\n        locations={locations}\n        onMarkerClick={handleMarkerClick}\n      />\n      <Sidebar\n        applications={appStatuses}\n        loading={loading}\n        error={error}\n        lastUpdate={lastUpdate}\n        onRefresh={handleRefresh}\n      />\n    </div>\n  );\n};\n\nexport default App;\n'})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Props:"})," None (root component)"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"State:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"appStatuses"}),": Array of application status objects"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"locations"}),": Array of location objects"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"loading"}),": Boolean indicating data loading state"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"error"}),": Error object if fetch fails"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"lastUpdate"}),": Timestamp of last successful update"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"mapjs---interactive-world-map",children:"Map.js - Interactive World Map"}),"\n",(0,s.jsx)(e.p,{children:"Renders the world map with application status markers using D3.js."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import React, { useRef, useEffect, useState } from "react";\nimport * as d3 from "d3";\nimport worldData from "../data/world-110m.json";\n\nconst Map = ({ applications, locations, onMarkerClick }) => {\n  const svgRef = useRef();\n  const [selectedApp, setSelectedApp] = useState(null);\n  const [tooltip, setTooltip] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    content: null,\n  });\n\n  useEffect(() => {\n    if (!applications.length || !locations.length) return;\n\n    const svg = d3.select(svgRef.current);\n    const width = 960;\n    const height = 500;\n\n    // Clear previous content\n    svg.selectAll("*").remove();\n\n    // Set up projection\n    const projection = d3\n      .geoNaturalEarth1()\n      .scale(width / 6.5)\n      .translate([width / 2, height / 2]);\n\n    const path = d3.geoPath().projection(projection);\n\n    // Render world map\n    svg\n      .append("g")\n      .selectAll("path")\n      .data(worldData.features)\n      .enter()\n      .append("path")\n      .attr("d", path)\n      .attr("class", "country")\n      .attr("fill", "#e0e0e0")\n      .attr("stroke", "#ccc")\n      .attr("stroke-width", 0.5);\n\n    // Render application markers\n    const markers = svg\n      .append("g")\n      .selectAll("circle")\n      .data(applications)\n      .enter()\n      .append("circle")\n      .attr(\n        "cx",\n        (d) => projection([d.coordinates.longitude, d.coordinates.latitude])[0],\n      )\n      .attr(\n        "cy",\n        (d) => projection([d.coordinates.longitude, d.coordinates.latitude])[1],\n      )\n      .attr("r", 8)\n      .attr("class", (d) => `marker marker-${d.status}`)\n      .attr("fill", (d) => getStatusColor(d.status))\n      .attr("stroke", "#fff")\n      .attr("stroke-width", 2)\n      .style("cursor", "pointer")\n      .on("click", handleMarkerClick)\n      .on("mouseover", handleMarkerMouseOver)\n      .on("mouseout", handleMarkerMouseOut);\n\n    // Add application labels\n    svg\n      .append("g")\n      .selectAll("text")\n      .data(applications)\n      .enter()\n      .append("text")\n      .attr(\n        "x",\n        (d) => projection([d.coordinates.longitude, d.coordinates.latitude])[0],\n      )\n      .attr(\n        "y",\n        (d) =>\n          projection([d.coordinates.longitude, d.coordinates.latitude])[1] + 20,\n      )\n      .attr("text-anchor", "middle")\n      .attr("class", "marker-label")\n      .style("font-size", "12px")\n      .style("fill", "#333")\n      .text((d) => d.name);\n  }, [applications, locations]);\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case "up":\n        return "#4caf50";\n      case "down":\n        return "#f44336";\n      case "unknown":\n        return "#ff9800";\n      default:\n        return "#9e9e9e";\n    }\n  };\n\n  const handleMarkerClick = (event, d) => {\n    setSelectedApp(d);\n    if (onMarkerClick) {\n      onMarkerClick(d);\n    }\n  };\n\n  const handleMarkerMouseOver = (event, d) => {\n    const [x, y] = d3.pointer(event);\n    setTooltip({\n      visible: true,\n      x: x + 10,\n      y: y - 10,\n      content: (\n        <div className="tooltip-content">\n          <strong>{d.name}</strong>\n          <div>\n            Status: <span className={`status-${d.status}`}>{d.status}</span>\n          </div>\n          <div>Location: {d.location}</div>\n          {d.responseTime && <div>Response: {d.responseTime}s</div>}\n        </div>\n      ),\n    });\n  };\n\n  const handleMarkerMouseOut = () => {\n    setTooltip({ visible: false, x: 0, y: 0, content: null });\n  };\n\n  return (\n    <div className="map-container">\n      <svg\n        ref={svgRef}\n        className="world-map"\n        viewBox="0 0 960 500"\n        preserveAspectRatio="xMidYMid meet"\n      />\n\n      {tooltip.visible && (\n        <div\n          className="tooltip"\n          style={{\n            position: "absolute",\n            left: tooltip.x,\n            top: tooltip.y,\n            pointerEvents: "none",\n          }}\n        >\n          {tooltip.content}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Map;\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Props:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"applications"}),": Array of application objects with coordinates"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"locations"}),": Array of location objects"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"onMarkerClick"}),": Callback function when marker is clicked"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Features:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"SVG-based world map rendering"}),"\n",(0,s.jsx)(e.li,{children:"Interactive application markers"}),"\n",(0,s.jsx)(e.li,{children:"Hover tooltips with status information"}),"\n",(0,s.jsx)(e.li,{children:"Click handlers for application selection"}),"\n",(0,s.jsx)(e.li,{children:"Responsive design with viewBox"}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"sidebarjs---application-status-panel",children:"Sidebar.js - Application Status Panel"}),"\n",(0,s.jsx)(e.p,{children:"Displays application status list with filtering and sorting capabilities."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import React, { useState, useMemo } from "react";\nimport AppStatusPanel from "./AppStatusPanel";\n\nconst Sidebar = ({ applications, loading, error, lastUpdate, onRefresh }) => {\n  const [filter, setFilter] = useState("all");\n  const [sortBy, setSortBy] = useState("name");\n  const [sortOrder, setSortOrder] = useState("asc");\n  const [searchTerm, setSearchTerm] = useState("");\n\n  // Filter and sort applications\n  const filteredAndSortedApps = useMemo(() => {\n    let filtered = applications;\n\n    // Apply status filter\n    if (filter !== "all") {\n      filtered = filtered.filter((app) => app.status === filter);\n    }\n\n    // Apply search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (app) =>\n          app.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          app.location.toLowerCase().includes(searchTerm.toLowerCase()),\n      );\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      let aValue = a[sortBy];\n      let bValue = b[sortBy];\n\n      if (typeof aValue === "string") {\n        aValue = aValue.toLowerCase();\n        bValue = bValue.toLowerCase();\n      }\n\n      if (sortOrder === "asc") {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n      }\n    });\n\n    return filtered;\n  }, [applications, filter, sortBy, sortOrder, searchTerm]);\n\n  // Status summary\n  const statusSummary = useMemo(() => {\n    const summary = applications.reduce((acc, app) => {\n      acc[app.status] = (acc[app.status] || 0) + 1;\n      return acc;\n    }, {});\n\n    return {\n      total: applications.length,\n      up: summary.up || 0,\n      down: summary.down || 0,\n      unknown: summary.unknown || 0,\n    };\n  }, [applications]);\n\n  if (loading) {\n    return (\n      <div className="sidebar">\n        <div className="loading">\n          <div className="spinner"></div>\n          <p>Loading applications...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className="sidebar">\n        <div className="error">\n          <h3>Error Loading Data</h3>\n          <p>{error.message}</p>\n          <button onClick={onRefresh} className="retry-button">\n            Retry\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className="sidebar">\n      {/* Header */}\n      <div className="sidebar-header">\n        <h2>Applications</h2>\n        <button onClick={onRefresh} className="refresh-button" title="Refresh">\n          \ud83d\udd04\n        </button>\n      </div>\n\n      {/* Status Summary */}\n      <div className="status-summary">\n        <div className="summary-item">\n          <span className="count">{statusSummary.total}</span>\n          <span className="label">Total</span>\n        </div>\n        <div className="summary-item status-up">\n          <span className="count">{statusSummary.up}</span>\n          <span className="label">Up</span>\n        </div>\n        <div className="summary-item status-down">\n          <span className="count">{statusSummary.down}</span>\n          <span className="label">Down</span>\n        </div>\n        <div className="summary-item status-unknown">\n          <span className="count">{statusSummary.unknown}</span>\n          <span className="label">Unknown</span>\n        </div>\n      </div>\n\n      {/* Controls */}\n      <div className="sidebar-controls">\n        {/* Search */}\n        <input\n          type="text"\n          placeholder="Search applications..."\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className="search-input"\n        />\n\n        {/* Filter */}\n        <select\n          value={filter}\n          onChange={(e) => setFilter(e.target.value)}\n          className="filter-select"\n        >\n          <option value="all">All Status</option>\n          <option value="up">Up</option>\n          <option value="down">Down</option>\n          <option value="unknown">Unknown</option>\n        </select>\n\n        {/* Sort */}\n        <select\n          value={sortBy}\n          onChange={(e) => setSortBy(e.target.value)}\n          className="sort-select"\n        >\n          <option value="name">Name</option>\n          <option value="location">Location</option>\n          <option value="status">Status</option>\n          <option value="lastCheck">Last Check</option>\n        </select>\n\n        <button\n          onClick={() => setSortOrder(sortOrder === "asc" ? "desc" : "asc")}\n          className="sort-order-button"\n          title={`Sort ${sortOrder === "asc" ? "Descending" : "Ascending"}`}\n        >\n          {sortOrder === "asc" ? "\u2191" : "\u2193"}\n        </button>\n      </div>\n\n      {/* Application List */}\n      <div className="app-list">\n        {filteredAndSortedApps.length === 0 ? (\n          <div className="empty-state">\n            <p>No applications match your criteria</p>\n          </div>\n        ) : (\n          filteredAndSortedApps.map((app) => (\n            <AppStatusPanel key={app.name} application={app} />\n          ))\n        )}\n      </div>\n\n      {/* Footer */}\n      {lastUpdate && (\n        <div className="sidebar-footer">\n          <small>Last updated: {lastUpdate.toLocaleTimeString()}</small>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Sidebar;\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Props:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"applications"}),": Array of application objects"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"loading"}),": Boolean indicating loading state"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"error"}),": Error object if present"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"lastUpdate"}),": Timestamp of last update"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"onRefresh"}),": Callback function for refresh action"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Features:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Real-time status summary"}),"\n",(0,s.jsx)(e.li,{children:"Search functionality"}),"\n",(0,s.jsx)(e.li,{children:"Status filtering"}),"\n",(0,s.jsx)(e.li,{children:"Multiple sorting options"}),"\n",(0,s.jsx)(e.li,{children:"Error handling and retry mechanism"}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"appstatuspaneljs---individual-application-status",children:"AppStatusPanel.js - Individual Application Status"}),"\n",(0,s.jsx)(e.p,{children:"Displays detailed status information for a single application."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import React from "react";\n\nconst AppStatusPanel = ({ application }) => {\n  const {\n    name,\n    location,\n    status,\n    lastCheck,\n    responseTime,\n    metric,\n    prometheus_url,\n  } = application;\n\n  const formatTime = (timestamp) => {\n    if (!timestamp) return "Never";\n\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffMs = now - date;\n    const diffMins = Math.floor(diffMs / 60000);\n\n    if (diffMins < 1) return "Just now";\n    if (diffMins < 60) return `${diffMins}m ago`;\n\n    const diffHours = Math.floor(diffMins / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n\n    return date.toLocaleDateString();\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case "up":\n        return "\u2705";\n      case "down":\n        return "\u274c";\n      case "unknown":\n        return "\u2753";\n      default:\n        return "\u26aa";\n    }\n  };\n\n  const getStatusClass = (status) => {\n    return `status-indicator status-${status}`;\n  };\n\n  return (\n    <div className={`app-status-panel app-status-${status}`}>\n      {/* Status Indicator */}\n      <div className={getStatusClass(status)}>\n        <span\n          className="status-icon"\n          role="img"\n          aria-label={`Status: ${status}`}\n        >\n          {getStatusIcon(status)}\n        </span>\n      </div>\n\n      {/* Application Info */}\n      <div className="app-info">\n        <div className="app-header">\n          <h3 className="app-name" title={name}>\n            {name}\n          </h3>\n          <span className={`status-badge status-${status}`}>\n            {status.toUpperCase()}\n          </span>\n        </div>\n\n        <div className="app-details">\n          <div className="detail-item">\n            <span className="detail-label">Location:</span>\n            <span className="detail-value">{location}</span>\n          </div>\n\n          <div className="detail-item">\n            <span className="detail-label">Last Check:</span>\n            <span className="detail-value" title={lastCheck}>\n              {formatTime(lastCheck)}\n            </span>\n          </div>\n\n          {responseTime && (\n            <div className="detail-item">\n              <span className="detail-label">Response Time:</span>\n              <span className="detail-value">{responseTime.toFixed(3)}s</span>\n            </div>\n          )}\n\n          {metric && (\n            <div className="detail-item">\n              <span className="detail-label">Metric:</span>\n              <span className="detail-value metric-query" title={metric}>\n                {metric.length > 40 ? `${metric.substring(0, 40)}...` : metric}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Actions */}\n      <div className="app-actions">\n        {prometheus_url && (\n          <a\n            href={prometheus_url}\n            target="_blank"\n            rel="noopener noreferrer"\n            className="action-link"\n            title="View in Prometheus"\n          >\n            \ud83d\udcca\n          </a>\n        )}\n\n        <button\n          className="action-button"\n          onClick={() => navigator.clipboard?.writeText(name)}\n          title="Copy application name"\n        >\n          \ud83d\udccb\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(AppStatusPanel);\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Props:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"application"}),": Object containing application details","\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"name"}),": Application name"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"location"}),": Geographic location"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"status"}),": Current status ('up', 'down', 'unknown')"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"lastCheck"}),": Timestamp of last check"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"responseTime"}),": Response time in seconds"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"metric"}),": Prometheus metric query"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"prometheus_url"}),": URL to Prometheus instance"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Features:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Status visualization with icons and colors"}),"\n",(0,s.jsx)(e.li,{children:"Relative time formatting"}),"\n",(0,s.jsx)(e.li,{children:"Responsive layout"}),"\n",(0,s.jsx)(e.li,{children:"Action buttons for external links"}),"\n",(0,s.jsx)(e.li,{children:"Memoized for performance"}),"\n",(0,s.jsx)(e.li,{children:"Accessibility support with ARIA labels"}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"utility-components",children:"Utility Components"}),"\n",(0,s.jsx)(e.h3,{id:"errorboundaryjs---error-handling",children:"ErrorBoundary.js - Error Handling"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import React from "react";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null, errorInfo: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n\n    // Log error to console or external service\n    console.error("ErrorBoundary caught an error:", error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className="error-boundary">\n          <h2>Something went wrong</h2>\n          <p>An unexpected error occurred. Please refresh the page.</p>\n\n          {process.env.NODE_ENV === "development" && (\n            <details style={{ whiteSpace: "pre-wrap", marginTop: "20px" }}>\n              <summary>Error Details (Development Only)</summary>\n              {this.state.error && this.state.error.toString()}\n              <br />\n              {this.state.errorInfo.componentStack}\n            </details>\n          )}\n\n          <button\n            onClick={() => window.location.reload()}\n            className="error-retry-button"\n          >\n            Refresh Page\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n'})}),"\n",(0,s.jsx)(e.h3,{id:"loadingspinnerjs---loading-indicator",children:"LoadingSpinner.js - Loading Indicator"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'import React from "react";\n\nconst LoadingSpinner = ({ size = "medium", message = "Loading..." }) => {\n  const sizeClasses = {\n    small: "spinner-small",\n    medium: "spinner-medium",\n    large: "spinner-large",\n  };\n\n  return (\n    <div className="loading-container">\n      <div className={`spinner ${sizeClasses[size]}`}>\n        <div className="spinner-circle"></div>\n      </div>\n      {message && <p className="loading-message">{message}</p>}\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n'})}),"\n",(0,s.jsx)(e.p,{children:"These components provide a solid foundation for the Site Availability Monitoring frontend, with proper state management, error handling, and user experience considerations."})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);