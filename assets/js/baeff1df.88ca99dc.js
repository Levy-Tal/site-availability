"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[864],{7969:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/authentication","title":"Authentication","description":"Secure your Site Availability Monitoring API with HMAC-SHA256 authentication.","source":"@site/docs/api/authentication.md","sourceDirName":"api","slug":"/api/authentication","permalink":"/site-availability/docs/api/authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/Levy-Tal/site-availability/tree/main/docs/docs/api/authentication.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"API Endpoints","permalink":"/site-availability/docs/api/endpoints"},"next":{"title":"Metrics Integration","permalink":"/site-availability/docs/api/metrics"}}');var s=t(4848),r=t(8453);const a={sidebar_position:3},o="Authentication",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Enabling Authentication",id:"enabling-authentication",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Environment Variable",id:"environment-variable",level:3},{value:"HMAC Signature Process",id:"hmac-signature-process",level:2},{value:"1. Create the Canonical Request",id:"1-create-the-canonical-request",level:3},{value:"2. Generate the Signature",id:"2-generate-the-signature",level:3},{value:"3. Add Headers to Request",id:"3-add-headers-to-request",level:3},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"JavaScript/Node.js",id:"javascriptnodejs",level:3},{value:"Go",id:"go",level:3},{value:"Python",id:"python",level:3},{value:"cURL",id:"curl",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Clock Skew Tolerance",id:"clock-skew-tolerance",level:3},{value:"Secret Management",id:"secret-management",level:3},{value:"Replay Attack Prevention",id:"replay-attack-prevention",level:3},{value:"Authentication Errors",id:"authentication-errors",level:2},{value:"Invalid Signature",id:"invalid-signature",level:3},{value:"Timestamp Issues",id:"timestamp-issues",level:3},{value:"Missing Headers",id:"missing-headers",level:3},{value:"Testing Authentication",id:"testing-authentication",level:2},{value:"Verification Script",id:"verification-script",level:3},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"authentication",children:"Authentication"})}),"\n",(0,s.jsx)(n.p,{children:"Secure your Site Availability Monitoring API with HMAC-SHA256 authentication."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The API supports HMAC (Hash-based Message Authentication Code) authentication using SHA-256 for secure access. This ensures that requests are authentic and haven't been tampered with."}),"\n",(0,s.jsx)(n.h2,{id:"enabling-authentication",children:"Enabling Authentication"}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Enable HMAC authentication in your configuration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# config.yaml\nauthentication:\n  hmac:\n    enabled: true\n    secret: ${SA_HMAC_SECRET} # Use environment variable\n    algorithm: sha256\n    clock_skew_tolerance: 300 # 5 minutes\n"})}),"\n",(0,s.jsx)(n.h3,{id:"environment-variable",children:"Environment Variable"}),"\n",(0,s.jsx)(n.p,{children:"Set the HMAC secret via environment variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'export SA_HMAC_SECRET="your-very-secure-secret-key-here"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"hmac-signature-process",children:"HMAC Signature Process"}),"\n",(0,s.jsx)(n.h3,{id:"1-create-the-canonical-request",children:"1. Create the Canonical Request"}),"\n",(0,s.jsx)(n.p,{children:"Construct a canonical string from the request:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"METHOD\\nPATH\\nBODY\\nTIMESTAMP\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"GET\\n/api/apps\\n\\n1638360000\n"})}),"\n",(0,s.jsx)(n.p,{children:"For POST requests with body:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'POST\\n/api/scrape-interval\\n{"interval":"60s"}\\n1638360000\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-generate-the-signature",children:"2. Generate the Signature"}),"\n",(0,s.jsx)(n.p,{children:"Create HMAC-SHA256 signature:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const crypto = require("crypto");\n\nfunction generateSignature(method, path, body, timestamp, secret) {\n  const canonicalRequest = `${method}\\n${path}\\n${body || ""}\\n${timestamp}`;\n  const signature = crypto\n    .createHmac("sha256", secret)\n    .update(canonicalRequest)\n    .digest("hex");\n  return signature;\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-add-headers-to-request",children:"3. Add Headers to Request"}),"\n",(0,s.jsx)(n.p,{children:"Include the signature and timestamp in request headers:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"Authorization: HMAC-SHA256 <signature>\nX-Timestamp: <unix_timestamp>\nContent-Type: application/json\n"})}),"\n",(0,s.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,s.jsx)(n.h3,{id:"javascriptnodejs",children:"JavaScript/Node.js"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'class SiteAvailabilityClient {\n  constructor(baseUrl, secret) {\n    this.baseUrl = baseUrl;\n    this.secret = secret;\n  }\n\n  generateSignature(method, path, body, timestamp) {\n    const crypto = require("crypto");\n    const canonicalRequest = `${method}\\n${path}\\n${body || ""}\\n${timestamp}`;\n    return crypto\n      .createHmac("sha256", this.secret)\n      .update(canonicalRequest)\n      .digest("hex");\n  }\n\n  async makeRequest(method, path, body = null) {\n    const timestamp = Math.floor(Date.now() / 1000);\n    const bodyString = body ? JSON.stringify(body) : "";\n    const signature = this.generateSignature(\n      method,\n      path,\n      bodyString,\n      timestamp,\n    );\n\n    const headers = {\n      Authorization: `HMAC-SHA256 ${signature}`,\n      "X-Timestamp": timestamp.toString(),\n      "Content-Type": "application/json",\n    };\n\n    const response = await fetch(`${this.baseUrl}${path}`, {\n      method,\n      headers,\n      body: bodyString || undefined,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  // Usage examples\n  async getApplications() {\n    return this.makeRequest("GET", "/api/apps");\n  }\n\n  async updateScrapeInterval(interval) {\n    return this.makeRequest("POST", "/api/scrape-interval", { interval });\n  }\n}\n\n// Usage\nconst client = new SiteAvailabilityClient(\n  "http://localhost:8080",\n  "your-secret-key",\n);\n\nconst apps = await client.getApplications();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"go",children:"Go"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "bytes"\n    "crypto/hmac"\n    "crypto/sha256"\n    "encoding/hex"\n    "encoding/json"\n    "fmt"\n    "io"\n    "net/http"\n    "strconv"\n    "time"\n)\n\ntype Client struct {\n    BaseURL string\n    Secret  string\n    HTTP    *http.Client\n}\n\nfunc NewClient(baseURL, secret string) *Client {\n    return &Client{\n        BaseURL: baseURL,\n        Secret:  secret,\n        HTTP:    &http.Client{Timeout: 30 * time.Second},\n    }\n}\n\nfunc (c *Client) generateSignature(method, path, body string, timestamp int64) string {\n    canonicalRequest := fmt.Sprintf("%s\\n%s\\n%s\\n%d", method, path, body, timestamp)\n    h := hmac.New(sha256.New, []byte(c.Secret))\n    h.Write([]byte(canonicalRequest))\n    return hex.EncodeToString(h.Sum(nil))\n}\n\nfunc (c *Client) makeRequest(method, path string, body interface{}) (*http.Response, error) {\n    var bodyBytes []byte\n    var bodyString string\n\n    if body != nil {\n        var err error\n        bodyBytes, err = json.Marshal(body)\n        if err != nil {\n            return nil, err\n        }\n        bodyString = string(bodyBytes)\n    }\n\n    timestamp := time.Now().Unix()\n    signature := c.generateSignature(method, path, bodyString, timestamp)\n\n    req, err := http.NewRequest(method, c.BaseURL+path, bytes.NewBuffer(bodyBytes))\n    if err != nil {\n        return nil, err\n    }\n\n    req.Header.Set("Authorization", fmt.Sprintf("HMAC-SHA256 %s", signature))\n    req.Header.Set("X-Timestamp", strconv.FormatInt(timestamp, 10))\n    req.Header.Set("Content-Type", "application/json")\n\n    return c.HTTP.Do(req)\n}\n\n// Usage examples\nfunc (c *Client) GetApplications() ([]Application, error) {\n    resp, err := c.makeRequest("GET", "/api/apps", nil)\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n\n    var result struct {\n        Data []Application `json:"data"`\n    }\n\n    if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {\n        return nil, err\n    }\n\n    return result.Data, nil\n}\n\nfunc (c *Client) UpdateScrapeInterval(interval string) error {\n    body := map[string]string{"interval": interval}\n    resp, err := c.makeRequest("POST", "/api/scrape-interval", body)\n    if err != nil {\n        return err\n    }\n    defer resp.Body.Close()\n\n    if resp.StatusCode != http.StatusOK {\n        return fmt.Errorf("unexpected status: %d", resp.StatusCode)\n    }\n\n    return nil\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import hashlib\nimport hmac\nimport json\nimport time\nimport requests\n\nclass SiteAvailabilityClient:\n    def __init__(self, base_url, secret):\n        self.base_url = base_url\n        self.secret = secret.encode('utf-8')\n\n    def generate_signature(self, method, path, body, timestamp):\n        canonical_request = f\"{method}\\n{path}\\n{body or ''}\\n{timestamp}\"\n        signature = hmac.new(\n            self.secret,\n            canonical_request.encode('utf-8'),\n            hashlib.sha256\n        ).hexdigest()\n        return signature\n\n    def make_request(self, method, path, body=None):\n        timestamp = int(time.time())\n        body_string = json.dumps(body) if body else ''\n        signature = self.generate_signature(method, path, body_string, timestamp)\n\n        headers = {\n            'Authorization': f'HMAC-SHA256 {signature}',\n            'X-Timestamp': str(timestamp),\n            'Content-Type': 'application/json'\n        }\n\n        url = f\"{self.base_url}{path}\"\n        response = requests.request(\n            method,\n            url,\n            headers=headers,\n            data=body_string if body_string else None\n        )\n\n        response.raise_for_status()\n        return response.json()\n\n    def get_applications(self):\n        return self.make_request('GET', '/api/apps')\n\n    def update_scrape_interval(self, interval):\n        return self.make_request('POST', '/api/scrape-interval', {'interval': interval})\n\n# Usage\nclient = SiteAvailabilityClient('http://localhost:8080', 'your-secret-key')\napps = client.get_applications()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"curl",children:"cURL"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\nSECRET="your-secret-key"\nBASE_URL="http://localhost:8080"\nMETHOD="GET"\nPATH="/api/apps"\nBODY=""\nTIMESTAMP=$(date +%s)\n\n# Create canonical request\nCANONICAL_REQUEST="${METHOD}\\n${PATH}\\n${BODY}\\n${TIMESTAMP}"\n\n# Generate signature\nSIGNATURE=$(echo -ne "$CANONICAL_REQUEST" | openssl dgst -sha256 -hmac "$SECRET" -hex | cut -d\' \' -f2)\n\n# Make request\ncurl -X "$METHOD" \\\n  -H "Authorization: HMAC-SHA256 $SIGNATURE" \\\n  -H "X-Timestamp: $TIMESTAMP" \\\n  -H "Content-Type: application/json" \\\n  "$BASE_URL$PATH"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"clock-skew-tolerance",children:"Clock Skew Tolerance"}),"\n",(0,s.jsx)(n.p,{children:"The server accepts requests within a configurable time window to account for clock differences:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"authentication:\n  hmac:\n    clock_skew_tolerance: 300 # 5 minutes\n"})}),"\n",(0,s.jsx)(n.h3,{id:"secret-management",children:"Secret Management"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Best Practices:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use strong, randomly generated secrets (minimum 32 characters)"}),"\n",(0,s.jsx)(n.li,{children:"Store secrets in environment variables or secure key management systems"}),"\n",(0,s.jsx)(n.li,{children:"Rotate secrets regularly"}),"\n",(0,s.jsx)(n.li,{children:"Never commit secrets to version control"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Secret Generation:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Generate a secure secret\nopenssl rand -hex 32\n"})}),"\n",(0,s.jsx)(n.h3,{id:"replay-attack-prevention",children:"Replay Attack Prevention"}),"\n",(0,s.jsx)(n.p,{children:"The timestamp in the signature helps prevent replay attacks:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Each request must include a current timestamp"}),"\n",(0,s.jsx)(n.li,{children:"Server rejects requests outside the tolerance window"}),"\n",(0,s.jsx)(n.li,{children:"Consider implementing nonce tracking for additional security"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"authentication-errors",children:"Authentication Errors"}),"\n",(0,s.jsx)(n.h3,{id:"invalid-signature",children:"Invalid Signature"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": {\n    "code": "INVALID_SIGNATURE",\n    "message": "HMAC signature verification failed",\n    "details": ["Check your secret key and signature generation"]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"timestamp-issues",children:"Timestamp Issues"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": {\n    "code": "TIMESTAMP_ERROR",\n    "message": "Request timestamp outside acceptable range",\n    "details": [\n      "Current server time: 1638360300",\n      "Request timestamp: 1638359000"\n    ]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"missing-headers",children:"Missing Headers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "error": {\n    "code": "MISSING_AUTH_HEADERS",\n    "message": "Required authentication headers missing",\n    "details": ["Authorization and X-Timestamp headers required"]\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"testing-authentication",children:"Testing Authentication"}),"\n",(0,s.jsx)(n.h3,{id:"verification-script",children:"Verification Script"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n# test-auth.sh\n\nSECRET="your-secret-key"\nBASE_URL="http://localhost:8080"\n\necho "Testing authentication..."\n\n# Test GET request\nMETHOD="GET"\nPATH="/api/apps"\nBODY=""\nTIMESTAMP=$(date +%s)\nCANONICAL_REQUEST="${METHOD}\\n${PATH}\\n${BODY}\\n${TIMESTAMP}"\nSIGNATURE=$(echo -ne "$CANONICAL_REQUEST" | openssl dgst -sha256 -hmac "$SECRET" -hex | cut -d\' \' -f2)\n\necho "GET /api/apps"\ncurl -s -w "Status: %{http_code}\\n" \\\n  -H "Authorization: HMAC-SHA256 $SIGNATURE" \\\n  -H "X-Timestamp: $TIMESTAMP" \\\n  "$BASE_URL$PATH"\n\n# Test POST request\nMETHOD="POST"\nPATH="/api/scrape-interval"\nBODY=\'{"interval":"60s"}\'\nTIMESTAMP=$(date +%s)\nCANONICAL_REQUEST="${METHOD}\\n${PATH}\\n${BODY}\\n${TIMESTAMP}"\nSIGNATURE=$(echo -ne "$CANONICAL_REQUEST" | openssl dgst -sha256 -hmac "$SECRET" -hex | cut -d\' \' -f2)\n\necho -e "\\nPOST /api/scrape-interval"\ncurl -s -w "Status: %{http_code}\\n" \\\n  -X POST \\\n  -H "Authorization: HMAC-SHA256 $SIGNATURE" \\\n  -H "X-Timestamp: $TIMESTAMP" \\\n  -H "Content-Type: application/json" \\\n  -d "$BODY" \\\n  "$BASE_URL$PATH"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'func TestHMACAuthentication(t *testing.T) {\n    secret := "test-secret"\n    auth := NewHMACAuth(secret)\n\n    // Test valid signature\n    timestamp := time.Now().Unix()\n    signature := generateTestSignature("GET", "/api/apps", "", timestamp, secret)\n\n    req := httptest.NewRequest("GET", "/api/apps", nil)\n    req.Header.Set("Authorization", fmt.Sprintf("HMAC-SHA256 %s", signature))\n    req.Header.Set("X-Timestamp", strconv.FormatInt(timestamp, 10))\n\n    valid, err := auth.ValidateRequest(req)\n    assert.NoError(t, err)\n    assert.True(t, valid)\n\n    // Test invalid signature\n    req.Header.Set("Authorization", "HMAC-SHA256 invalid-signature")\n    valid, err = auth.ValidateRequest(req)\n    assert.Error(t, err)\n    assert.False(t, valid)\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clock Synchronization"}),": Ensure client and server clocks are synchronized"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Encoding"}),": Use UTF-8 encoding for all string operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Newlines"}),": Use ",(0,s.jsx)(n.code,{children:"\\n"})," (LF) for canonical request formatting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Empty Body"}),": Use empty string, not null, for requests without body"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"URL Encoding"}),": Use the exact path from the URL, not URL-encoded version"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,s.jsx)(n.p,{children:"Enable debug logging to troubleshoot authentication issues:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"authentication:\n  hmac:\n    debug: true # Only for development\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will log canonical requests and signatures (without revealing the secret)."}),"\n",(0,s.jsx)(n.p,{children:"Remember: HMAC authentication provides strong security when implemented correctly. Always use HTTPS in production to protect against man-in-the-middle attacks."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);