"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5180],{3537:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"usage/terminology","title":"Terminology","description":"This page defines key terms and concepts used throughout the Site Availability documentation.","source":"@site/docs/usage/terminology.md","sourceDirName":"usage","slug":"/usage/terminology","permalink":"/site-availability/docs/usage/terminology","draft":false,"unlisted":false,"editUrl":"https://github.com/Levy-Tal/site-availability/tree/main/docs/docs/usage/terminology.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Quick Start","permalink":"/site-availability/docs/usage/quickstart"},"next":{"title":"Server Configuration","permalink":"/site-availability/docs/usage/configuration/server"}}');var t=i(4848),o=i(8453);const a={sidebar_position:2},r="Terminology",l={},c=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Source",id:"source",level:3},{value:"App",id:"app",level:3},{value:"Location",id:"location",level:3},{value:"Status",id:"status",level:3},{value:"Up",id:"up",level:4},{value:"Down",id:"down",level:4},{value:"Unavailable",id:"unavailable",level:4},{value:"Label",id:"label",level:3},{value:"Configuration Terms",id:"configuration-terms",level:2},{value:"Server Configuration",id:"server-configuration",level:3},{value:"Source Configuration",id:"source-configuration",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"terminology",children:"Terminology"})}),"\n",(0,t.jsx)(n.p,{children:"This page defines key terms and concepts used throughout the Site Availability documentation."}),"\n",(0,t.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,t.jsx)(n.h3,{id:"source",children:"Source"}),"\n",(0,t.jsx)(n.p,{children:"A data source that provides monitoring information (e.g., Prometheus, HTTP endpoints). There are multiple sources (view sources in the docs). Every data source gets a 'config' section in the config.yaml, runs its scrape function against the config, and returns a list of apps with their statuses."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'- name: prometheus-main\n  type: prometheus\n  labels:\n    service: "metric-monitoring"\n    tier: "backend"\n  config:\n    url: http://prometheus:9090\n    apps:\n      - name: myApp\n        location: London\n        metric: up{instance="app:8080", job="app"}\n        labels:\n          app_type: "web-service"\n          importance: "medium"\n      - name: myPrometheus\n        location: New York City\n        metric: up{instance="localhost:9090", job="prometheus"}\n        labels:\n          app_type: "prometheus"\n          importance: "low"\n'})}),"\n",(0,t.jsx)(n.p,{children:"In this example, the Prometheus source will make an HTTP call to Prometheus to get the metrics value for each app. If the value is 1, then the app is up; if it's 0, then the app is down."}),"\n",(0,t.jsx)(n.h3,{id:"app",children:"App"}),"\n",(0,t.jsx)(n.p,{children:"An app is the smallest unit that has a status. An app can be a web app, database, server, network device, or any monitored service."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'apps:\n  - name: myApp\n    location: London\n    metric: up{instance="app:8080", job="app"}\n    labels:\n      app_type: "web-service"\n      importance: "medium"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"location",children:"Location"}),"\n",(0,t.jsx)(n.p,{children:"A location is a geographical location that contains apps. Every app lives in a geographical location."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"locations:\n  - name: New York City\n    latitude: 40.712776\n    longitude: -74.005974\n"})}),"\n",(0,t.jsx)(n.h3,{id:"status",children:"Status"}),"\n",(0,t.jsx)(n.h4,{id:"up",children:"Up"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"App"}),": App status is considered up if the source returned up"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Location"}),": Location is considered up if all apps in it are up"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"down",children:"Down"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"App"}),": App status is considered down if its source returned down"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Location"}),": Location is considered down if at least one app is down in the location"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"unavailable",children:"Unavailable"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"App"}),": App is considered unavailable if the source did not return an answer regarding this app"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Location"}),": Location is considered unavailable if one of the apps is unavailable and there is no app in down status"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"label",children:"Label"}),"\n",(0,t.jsxs)(n.p,{children:["Every app has labels. Labels are used for filtering and authorization (for example, only Group A can view apps that have the label ",(0,t.jsx)(n.code,{children:"group: A"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"There are 3 types of labels:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Server Labels"}),": Applied to all apps in the server"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Source Labels"}),": Applied to all apps in the source"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"App Labels"}),": Applied only to the specific app"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Every app gets its labels from the sum of: ",(0,t.jsx)(n.strong,{children:"App Labels + Source Labels + Server Labels"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-terms",children:"Configuration Terms"}),"\n",(0,t.jsx)(n.h3,{id:"server-configuration",children:"Server Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Settings that control the behavior of the Site Availability backend server."}),"\n",(0,t.jsx)(n.h3,{id:"source-configuration",children:"Source Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Settings that define how to connect to and collect data from monitoring sources."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var s=i(6540);const t={},o=s.createContext(t);function a(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);