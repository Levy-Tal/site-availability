"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5442],{2377:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"development/contributing","title":"Contributing Guide","description":"Welcome! We\'re excited that you want to contribute to Site Availability Monitoring.","source":"@site/docs/development/contributing.md","sourceDirName":"development","slug":"/development/contributing","permalink":"/site-availability/docs/development/contributing","draft":false,"unlisted":false,"editUrl":"https://github.com/Levy-Tal/site-availability/tree/main/docs/docs/development/contributing.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Testing Guide","permalink":"/site-availability/docs/development/testing"},"next":{"title":"API Overview","permalink":"/site-availability/docs/api/overview"}}');var s=i(4848),l=i(8453);const r={sidebar_position:3},o="Contributing Guide",c={},a=[{value:"Getting Started",id:"getting-started",level:2},{value:"1. Fork and Clone",id:"1-fork-and-clone",level:3},{value:"2. Set Up Development Environment",id:"2-set-up-development-environment",level:3},{value:"3. Create a Branch",id:"3-create-a-branch",level:3},{value:"Contribution Types",id:"contribution-types",level:2},{value:"\ud83d\udc1b Bug Reports",id:"-bug-reports",level:3},{value:"\u2728 Feature Requests",id:"-feature-requests",level:3},{value:"\ud83d\udcdd Documentation",id:"-documentation",level:3},{value:"\ud83d\udd27 Code Contributions",id:"-code-contributions",level:3},{value:"Development Guidelines",id:"development-guidelines",level:2},{value:"Commit Messages",id:"commit-messages",level:3},{value:"Testing Requirements",id:"testing-requirements",level:3},{value:"Backend Tests",id:"backend-tests",level:4},{value:"Frontend Tests",id:"frontend-tests",level:4},{value:"Review Process",id:"review-process",level:2},{value:"Pull Request Guidelines",id:"pull-request-guidelines",level:3},{value:"Review Checklist",id:"review-checklist",level:3},{value:"Reviewer Guidelines",id:"reviewer-guidelines",level:3},{value:"Community Guidelines",id:"community-guidelines",level:2},{value:"Code of Conduct",id:"code-of-conduct",level:3},{value:"Communication Channels",id:"communication-channels",level:3},{value:"Getting Help",id:"getting-help",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"contributing-guide",children:"Contributing Guide"})}),"\n",(0,s.jsx)(n.p,{children:"Welcome! We're excited that you want to contribute to Site Availability Monitoring."}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsx)(n.h3,{id:"1-fork-and-clone",children:"1. Fork and Clone"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Fork the repository on GitHub, then clone your fork\ngit clone https://github.com/YOUR_USERNAME/site-availability.git\ncd site-availability\n\n# Add upstream remote\ngit remote add upstream https://github.com/Levy-Tal/site-availability.git\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-set-up-development-environment",children:"2. Set Up Development Environment"}),"\n",(0,s.jsxs)(n.p,{children:["Follow the ",(0,s.jsx)(n.a,{href:"./setup",children:"Development Setup"})," guide to get your environment ready."]}),"\n",(0,s.jsx)(n.h3,{id:"3-create-a-branch",children:"3. Create a Branch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Sync with upstream\ngit fetch upstream\ngit checkout main\ngit merge upstream/main\n\n# Create feature branch\ngit checkout -b feature/your-feature-name\n"})}),"\n",(0,s.jsx)(n.h2,{id:"contribution-types",children:"Contribution Types"}),"\n",(0,s.jsx)(n.h3,{id:"-bug-reports",children:"\ud83d\udc1b Bug Reports"}),"\n",(0,s.jsx)(n.p,{children:"Before creating a bug report:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Search existing issues"}),"\n",(0,s.jsx)(n.li,{children:"Test with the latest version"}),"\n",(0,s.jsx)(n.li,{children:"Provide minimal reproduction steps"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Use the bug report template:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"**Bug Description**\nA clear description of the bug.\n\n**Steps to Reproduce**\n\n1. Step one\n2. Step two\n3. See error\n\n**Expected Behavior**\nWhat should happen.\n\n**Environment**\n\n- OS: [e.g., Ubuntu 20.04]\n- Go version: [e.g., 1.21]\n- Node.js version: [e.g., 18.17]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-feature-requests",children:"\u2728 Feature Requests"}),"\n",(0,s.jsx)(n.p,{children:"For new features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check if it aligns with project goals"}),"\n",(0,s.jsx)(n.li,{children:"Discuss in GitHub Discussions first"}),"\n",(0,s.jsx)(n.li,{children:"Consider implementation complexity"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-documentation",children:"\ud83d\udcdd Documentation"}),"\n",(0,s.jsx)(n.p,{children:"Documentation contributions are always welcome:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fix typos and grammar"}),"\n",(0,s.jsx)(n.li,{children:"Add examples and clarifications"}),"\n",(0,s.jsx)(n.li,{children:"Improve setup instructions"}),"\n",(0,s.jsx)(n.li,{children:"Translate documentation"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-code-contributions",children:"\ud83d\udd27 Code Contributions"}),"\n",(0,s.jsx)(n.p,{children:"We welcome:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Bug fixes"}),"\n",(0,s.jsx)(n.li,{children:"New features"}),"\n",(0,s.jsx)(n.li,{children:"Performance improvements"}),"\n",(0,s.jsx)(n.li,{children:"Test improvements"}),"\n",(0,s.jsx)(n.li,{children:"Refactoring"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"development-guidelines",children:"Development Guidelines"}),"\n",(0,s.jsx)(n.h3,{id:"commit-messages",children:"Commit Messages"}),"\n",(0,s.jsx)(n.p,{children:"Use conventional commit format:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"type(scope): description\n\n[optional body]\n\n[optional footer]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Types:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"feat"}),": New feature"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"fix"}),": Bug fix"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"docs"}),": Documentation changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"style"}),": Code style changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"refactor"}),": Code refactoring"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"test"}),": Test additions/changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"chore"}),": Maintenance tasks"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Examples:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"feat(backend): add HMAC authentication\nfix(frontend): resolve map rendering issue\ndocs(api): update endpoint documentation\ntest(scraping): add prometheus client tests\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testing-requirements",children:"Testing Requirements"}),"\n",(0,s.jsx)(n.h4,{id:"backend-tests",children:"Backend Tests"}),"\n",(0,s.jsx)(n.p,{children:"All Go code should have tests:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'func TestGetApplicationStatus(t *testing.T) {\n    tests := []struct {\n        name     string\n        appName  string\n        expected *Status\n        wantErr  bool\n    }{\n        {\n            name:     "valid application",\n            appName:  "test-app",\n            expected: &Status{Available: true},\n            wantErr:  false,\n        },\n        {\n            name:     "invalid application",\n            appName:  "nonexistent",\n            expected: nil,\n            wantErr:  true,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            result, err := GetApplicationStatus(tt.appName)\n\n            if tt.wantErr && err == nil {\n                t.Error("expected error but got none")\n            }\n\n            if !tt.wantErr && err != nil {\n                t.Errorf("unexpected error: %v", err)\n            }\n\n            if !reflect.DeepEqual(result, tt.expected) {\n                t.Errorf("got %v, want %v", result, tt.expected)\n            }\n        })\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"frontend-tests",children:"Frontend Tests"}),"\n",(0,s.jsx)(n.p,{children:"Use Jest and React Testing Library:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import { render, screen, waitFor } from "@testing-library/react";\nimport { AppStatusPanel } from "./AppStatusPanel";\n\ndescribe("AppStatusPanel", () => {\n  test("renders application list", async () => {\n    const mockApps = [\n      { name: "app1", status: "up", location: "NYC" },\n      { name: "app2", status: "down", location: "LA" },\n    ];\n\n    render(<AppStatusPanel applications={mockApps} />);\n\n    await waitFor(() => {\n      expect(screen.getByText("app1")).toBeInTheDocument();\n      expect(screen.getByText("app2")).toBeInTheDocument();\n    });\n  });\n\n  test("handles empty application list", () => {\n    render(<AppStatusPanel applications={[]} />);\n    expect(screen.getByText(/no applications/i)).toBeInTheDocument();\n  });\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"review-process",children:"Review Process"}),"\n",(0,s.jsx)(n.h3,{id:"pull-request-guidelines",children:"Pull Request Guidelines"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Title"}),": Use conventional commit format"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Description"}),": Explain what and why, not how"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tests"}),": Include relevant tests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation"}),": Update docs if needed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Breaking Changes"}),": Clearly mark and explain"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"review-checklist",children:"Review Checklist"}),"\n",(0,s.jsx)(n.p,{children:"Before submitting:"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Tests pass locally"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Code follows style guidelines"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Documentation is updated"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","No sensitive information in commits"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Commit messages are clear"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ","PR description is complete"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"reviewer-guidelines",children:"Reviewer Guidelines"}),"\n",(0,s.jsx)(n.p,{children:"When reviewing:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Be constructive and respectful"}),"\n",(0,s.jsx)(n.li,{children:"Focus on code quality and maintainability"}),"\n",(0,s.jsx)(n.li,{children:"Check for security issues"}),"\n",(0,s.jsx)(n.li,{children:"Verify tests are adequate"}),"\n",(0,s.jsx)(n.li,{children:"Ensure documentation is accurate"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"community-guidelines",children:"Community Guidelines"}),"\n",(0,s.jsx)(n.h3,{id:"code-of-conduct",children:"Code of Conduct"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Be respectful and inclusive"}),"\n",(0,s.jsx)(n.li,{children:"Welcome newcomers"}),"\n",(0,s.jsx)(n.li,{children:"Focus on constructive feedback"}),"\n",(0,s.jsx)(n.li,{children:"Report inappropriate behavior"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"communication-channels",children:"Communication Channels"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Issues"}),": Bug reports and feature requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Discussions"}),": General questions and ideas"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pull Requests"}),": Code contributions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security"}),": add email in the issue , and the team will make contact with you."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Check existing documentation"}),"\n",(0,s.jsx)(n.li,{children:"Search existing issues"}),"\n",(0,s.jsx)(n.li,{children:"Ask in GitHub Discussions"}),"\n",(0,s.jsx)(n.li,{children:"Create an issue with detailed information"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Thank you for contributing to Site Availability Monitoring! \ud83c\udf89"})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(6540);const s={},l=t.createContext(s);function r(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);