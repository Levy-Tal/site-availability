"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7670],{5376:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"metrics","title":"Metrics Integration","description":"Monitor Site Availability with Prometheus metrics and integrate with observability platforms.","source":"@site/docs/metrics.md","sourceDirName":".","slug":"/metrics","permalink":"/site-availability/docs/metrics","draft":false,"unlisted":false,"editUrl":"https://github.com/Levy-Tal/site-availability/tree/main/docs/docs/metrics.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Testing Guide","permalink":"/site-availability/docs/development/testing"},"next":{"title":"API Overview","permalink":"/site-availability/docs/api/overview"}}');var a=i(4848),s=i(8453);const r={sidebar_position:4},l="Metrics Integration",o={},c=[{value:"Prometheus Metrics Endpoint",id:"prometheus-metrics-endpoint",level:2},{value:"Default Metrics",id:"default-metrics",level:3},{value:"Application Metrics",id:"application-metrics",level:4},{value:"Dynamic Labels",id:"dynamic-labels",level:5},{value:"HTTP Metrics",id:"http-metrics",level:4},{value:"System Metrics",id:"system-metrics",level:4},{value:"Custom Metrics",id:"custom-metrics",level:2},{value:"Business Metrics",id:"business-metrics",level:3},{value:"Location Metrics",id:"location-metrics",level:3},{value:"Prometheus Configuration",id:"prometheus-configuration",level:2},{value:"Scrape Configuration",id:"scrape-configuration",level:3},{value:"Metrics Authentication",id:"metrics-authentication",level:3},{value:"Basic Authentication",id:"basic-authentication",level:4},{value:"Bearer Token Authentication",id:"bearer-token-authentication",level:4},{value:"TLS Configuration",id:"tls-configuration",level:4},{value:"Service Discovery",id:"service-discovery",level:3},{value:"Recording Rules",id:"recording-rules",level:2},{value:"Alerting Rules",id:"alerting-rules",level:2},{value:"Grafana Integration",id:"grafana-integration",level:2},{value:"Dashboard Configuration",id:"dashboard-configuration",level:3},{value:"Overview Dashboard",id:"overview-dashboard",level:4},{value:"Application Details Dashboard",id:"application-details-dashboard",level:4},{value:"Grafana Provisioning",id:"grafana-provisioning",level:3},{value:"Custom Metrics Implementation",id:"custom-metrics-implementation",level:2},{value:"Adding New Metrics",id:"adding-new-metrics",level:3},{value:"Instrumenting Code",id:"instrumenting-code",level:3},{value:"Observability Best Practices",id:"observability-best-practices",level:2},{value:"Metric Naming",id:"metric-naming",level:3},{value:"Label Best Practices",id:"label-best-practices",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Monitoring the Monitor",id:"monitoring-the-monitor",level:2},{value:"Self-Monitoring Metrics",id:"self-monitoring-metrics",level:3},{value:"Health Checks",id:"health-checks",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"metrics-integration",children:"Metrics Integration"})}),"\n",(0,a.jsx)(n.p,{children:"Monitor Site Availability with Prometheus metrics and integrate with observability platforms."}),"\n",(0,a.jsx)(n.h2,{id:"prometheus-metrics-endpoint",children:"Prometheus Metrics Endpoint"}),"\n",(0,a.jsxs)(n.p,{children:["The application exposes metrics at ",(0,a.jsx)(n.code,{children:"/metrics"})," in Prometheus format."]}),"\n",(0,a.jsx)(n.h3,{id:"default-metrics",children:"Default Metrics"}),"\n",(0,a.jsx)(n.h4,{id:"application-metrics",children:"Application Metrics"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-prometheus",children:'# Application availability status with dynamic labels\nsite_availability_status{name="backend-app",location="me-central-1",source="frontend-app-prod",origin_url="http://localhost:8080",app="app1",env="production",team="backend"} 0\n\n# Scrape duration in seconds\nsite_availability_scrape_duration_seconds{target="frontend"} 0.142\n\n# Scrape requests total\nsite_availability_scrape_requests_total{target="frontend",status="success"} 1245\nsite_availability_scrape_requests_total{target="backend",status="error"} 3\n\n# Last successful scrape timestamp\nsite_availability_last_scrape_timestamp{target="frontend"} 1638360000\n'})}),"\n",(0,a.jsx)(n.h5,{id:"dynamic-labels",children:"Dynamic Labels"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"site_availability_status"})," metric includes dynamic labels from multiple sources:"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"System Labels (Always Present)"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"name"}),": Application name"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"location"}),": Geographic location"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"source"}),": Data source name"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"origin_url"}),": Original URL where the app data came from"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"User-Defined Labels"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Any labels defined at the server, source, or application level"}),"\n",(0,a.jsxs)(n.li,{children:["Examples: ",(0,a.jsx)(n.code,{children:"env"}),", ",(0,a.jsx)(n.code,{children:"team"}),", ",(0,a.jsx)(n.code,{children:"app"}),", ",(0,a.jsx)(n.code,{children:"version"}),", etc."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Label Precedence"}),":\nSystem labels always take precedence over user-defined labels. If a user defines a label with the same name as a system label, the system label value will be used in the metrics and the user label will be ignored."]}),"\n",(0,a.jsx)(n.p,{children:"For example:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["If an app has a user label ",(0,a.jsx)(n.code,{children:'name="my-custom-name"'}),", it will be overwritten by the system ",(0,a.jsx)(n.code,{children:"name"})," field (the actual application name)"]}),"\n",(0,a.jsxs)(n.li,{children:["If an app has a user label ",(0,a.jsx)(n.code,{children:'location="user-location"'}),", it will be overwritten by the system ",(0,a.jsx)(n.code,{children:"location"})," field"]}),"\n",(0,a.jsxs)(n.li,{children:["User labels like ",(0,a.jsx)(n.code,{children:"env"}),", ",(0,a.jsx)(n.code,{children:"team"}),", ",(0,a.jsx)(n.code,{children:"app"})," are preserved since they don't conflict with system labels"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"http-metrics",children:"HTTP Metrics"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-prometheus",children:'# HTTP requests total\nhttp_requests_total{method="GET",path="/api/apps",status="200"} 1245\nhttp_requests_total{method="POST",path="/api/scrape-interval",status="200"} 12\n\n# HTTP request duration\nhttp_request_duration_seconds{method="GET",path="/api/apps"} 0.045\n\n# Active HTTP connections\nhttp_connections_active 5\n'})}),"\n",(0,a.jsx)(n.h4,{id:"system-metrics",children:"System Metrics"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-prometheus",children:"# Go runtime metrics\ngo_goroutines 25\ngo_memstats_alloc_bytes 2.5e+06\ngo_memstats_gc_duration_seconds 0.001\n\n# Process metrics\nprocess_cpu_seconds_total 12.5\nprocess_resident_memory_bytes 2.5e+07\nprocess_uptime_seconds 3600\n"})}),"\n",(0,a.jsx)(n.h2,{id:"custom-metrics",children:"Custom Metrics"}),"\n",(0,a.jsx)(n.h3,{id:"business-metrics",children:"Business Metrics"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-prometheus",children:'# Overall system availability\nsite_availability_system_uptime_percentage 98.7\n\n# Applications by status\nsite_availability_apps_by_status{status="up"} 4\nsite_availability_apps_by_status{status="down"} 1\n\n# Response time percentiles\nsite_availability_response_time_p50 0.125\nsite_availability_response_time_p95 0.245\nsite_availability_response_time_p99 0.389\n'})}),"\n",(0,a.jsx)(n.h3,{id:"location-metrics",children:"Location Metrics"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-prometheus",children:'# Applications per location\nsite_availability_location_apps{location="New York"} 3\nsite_availability_location_apps{location="London"} 2\n\n# Location availability\nsite_availability_location_uptime{location="New York"} 0.667\nsite_availability_location_uptime{location="London"} 1.0\n'})}),"\n",(0,a.jsx)(n.h2,{id:"prometheus-configuration",children:"Prometheus Configuration"}),"\n",(0,a.jsx)(n.h3,{id:"scrape-configuration",children:"Scrape Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["Add Site Availability Monitoring to your ",(0,a.jsx)(n.code,{children:"prometheus.yml"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'global:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: "site-availability"\n    static_configs:\n      - targets: ["site-availability:8080"]\n    scrape_interval: 30s\n    metrics_path: "/metrics"\n    scheme: "http"\n\n    # Optional: Add labels\n    relabel_configs:\n      - target_label: "service"\n        replacement: "site-availability"\n      - target_label: "environment"\n        replacement: "production"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"metrics-authentication",children:"Metrics Authentication"}),"\n",(0,a.jsx)(n.p,{children:"If you have enabled metrics authentication in your server configuration, you'll need to configure Prometheus with the appropriate credentials."}),"\n",(0,a.jsx)(n.h4,{id:"basic-authentication",children:"Basic Authentication"}),"\n",(0,a.jsx)(n.p,{children:"If you're using basic authentication:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'scrape_configs:\n  - job_name: "site-availability"\n    static_configs:\n      - targets: ["site-availability:8080"]\n    metrics_path: "/metrics"\n    basic_auth:\n      username: "prometheus"\n      password: "your-secure-password"\n'})}),"\n",(0,a.jsx)(n.h4,{id:"bearer-token-authentication",children:"Bearer Token Authentication"}),"\n",(0,a.jsx)(n.p,{children:"If you're using bearer token authentication:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'scrape_configs:\n  - job_name: "site-availability"\n    static_configs:\n      - targets: ["site-availability:8080"]\n    metrics_path: "/metrics"\n    authorization:\n      type: Bearer\n      credentials: "your-secret-token"\n'})}),"\n",(0,a.jsx)(n.h4,{id:"tls-configuration",children:"TLS Configuration"}),"\n",(0,a.jsx)(n.p,{children:"For HTTPS endpoints, add TLS configuration:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'scrape_configs:\n  - job_name: "site-availability"\n    static_configs:\n      - targets: ["site-availability:8080"]\n    metrics_path: "/metrics"\n    scheme: "https"\n    tls_config:\n      ca_file: /etc/prometheus/certs/ca.crt\n      cert_file: /etc/prometheus/certs/client.crt\n      key_file: /etc/prometheus/certs/client.key\n    basic_auth:\n      username: "prometheus"\n      password: "your-secure-password"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"service-discovery",children:"Service Discovery"}),"\n",(0,a.jsx)(n.p,{children:"For Kubernetes deployments:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'scrape_configs:\n  - job_name: "site-availability-k8s"\n    kubernetes_sd_configs:\n      - role: pod\n        namespaces:\n          names: ["monitoring"]\n\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_label_app]\n        action: keep\n        regex: site-availability-backend\n\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"recording-rules",children:"Recording Rules"}),"\n",(0,a.jsx)(n.p,{children:"Create recording rules for common queries:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# recording-rules.yml\ngroups:\n  - name: site_availability_rules\n    interval: 30s\n    rules:\n      # Overall system availability\n      - record: site_availability:system:uptime_5m\n        expr: avg_over_time(site_availability_up[5m])\n\n      # Application availability by location\n      - record: site_availability:location:uptime_5m\n        expr: avg_over_time(site_availability_up[5m]) by (location)\n\n      # Response time moving average\n      - record: site_availability:response_time:avg_5m\n        expr: avg_over_time(site_availability_scrape_duration_seconds[5m])\n\n      # Error rate\n      - record: site_availability:error_rate_5m\n        expr: rate(site_availability_scrape_requests_total{status="error"}[5m])\n'})}),"\n",(0,a.jsx)(n.h2,{id:"alerting-rules",children:"Alerting Rules"}),"\n",(0,a.jsx)(n.p,{children:"Set up alerts for critical conditions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# alerting-rules.yml\ngroups:\n  - name: site_availability_alerts\n    rules:\n      # Application down alert\n      - alert: ApplicationDown\n        expr: site_availability_up == 0\n        for: 1m\n        labels:\n          severity: critical\n          service: site-availability\n        annotations:\n          summary: "Application {{ $labels.app }} is down"\n          description: "Application {{ $labels.app }} in {{ $labels.location }} has been down for more than 1 minute"\n          runbook_url: "https://docs.example.com/runbooks/app-down"\n\n      # High error rate alert\n      - alert: HighErrorRate\n        expr: rate(site_availability_scrape_requests_total{status="error"}[5m]) > 0.1\n        for: 5m\n        labels:\n          severity: warning\n          service: site-availability\n        annotations:\n          summary: "High error rate detected"\n          description: "Error rate is {{ $value | humanizePercentage }} for target {{ $labels.target }}"\n\n      # System availability alert\n      - alert: LowSystemAvailability\n        expr: site_availability:system:uptime_5m < 0.95\n        for: 10m\n        labels:\n          severity: warning\n          service: site-availability\n        annotations:\n          summary: "System availability below threshold"\n          description: "System availability is {{ $value | humanizePercentage }}, below 95% threshold"\n\n      # Scraping issues\n      - alert: ScrapingDown\n        expr: up{job="site-availability"} == 0\n        for: 2m\n        labels:\n          severity: critical\n          service: site-availability\n        annotations:\n          summary: "Site Availability Monitoring scraping is down"\n          description: "Prometheus cannot scrape Site Availability Monitoring metrics"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"grafana-integration",children:"Grafana Integration"}),"\n",(0,a.jsx)(n.h3,{id:"dashboard-configuration",children:"Dashboard Configuration"}),"\n",(0,a.jsxs)(n.p,{children:["Import the provided dashboard from ",(0,a.jsx)(n.code,{children:"chart/grafana-dashboards/dashboard.json"})," or create custom dashboards:"]}),"\n",(0,a.jsx)(n.h4,{id:"overview-dashboard",children:"Overview Dashboard"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "dashboard": {\n    "title": "Site Availability Monitoring",\n    "panels": [\n      {\n        "title": "System Overview",\n        "type": "stat",\n        "targets": [\n          {\n            "expr": "site_availability:system:uptime_5m * 100",\n            "legendFormat": "Availability %"\n          }\n        ]\n      },\n      {\n        "title": "Applications Status",\n        "type": "piechart",\n        "targets": [\n          {\n            "expr": "count by (status) (site_availability_up)",\n            "legendFormat": "{{ status }}"\n          }\n        ]\n      },\n      {\n        "title": "Response Time",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "site_availability_scrape_duration_seconds",\n            "legendFormat": "{{ target }}"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"application-details-dashboard",children:"Application Details Dashboard"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "dashboard": {\n    "title": "Application Details",\n    "templating": {\n      "list": [\n        {\n          "name": "app",\n          "type": "query",\n          "query": "label_values(site_availability_up, app)"\n        }\n      ]\n    },\n    "panels": [\n      {\n        "title": "Availability - $app",\n        "type": "graph",\n        "targets": [\n          {\n            "expr": "site_availability_up{app=\\"$app\\"}",\n            "legendFormat": "{{ location }}"\n          }\n        ]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"grafana-provisioning",children:"Grafana Provisioning"}),"\n",(0,a.jsx)(n.p,{children:"Automatically provision dashboards:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# grafana/provisioning/dashboards/site-availability.yml\napiVersion: 1\nproviders:\n  - name: "site-availability"\n    type: file\n    disableDeletion: false\n    updateIntervalSeconds: 10\n    allowUiUpdates: true\n    options:\n      path: /var/lib/grafana/dashboards/site-availability\n'})}),"\n",(0,a.jsx)(n.h2,{id:"custom-metrics-implementation",children:"Custom Metrics Implementation"}),"\n",(0,a.jsx)(n.h3,{id:"adding-new-metrics",children:"Adding New Metrics"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// metrics/custom.go\npackage metrics\n\nimport (\n    "github.com/prometheus/client_golang/prometheus"\n    "github.com/prometheus/client_golang/prometheus/promauto"\n)\n\nvar (\n    // Custom business metric\n    ApplicationResponseTime = promauto.NewHistogramVec(\n        prometheus.HistogramOpts{\n            Name: "site_availability_app_response_time_seconds",\n            Help: "Application response time in seconds",\n            Buckets: prometheus.DefBuckets,\n        },\n        []string{"app", "location", "status_code"},\n    )\n\n    // Configuration change metric\n    ConfigurationChanges = promauto.NewCounterVec(\n        prometheus.CounterOpts{\n            Name: "site_availability_config_changes_total",\n            Help: "Total configuration changes",\n        },\n        []string{"type", "user"},\n    )\n\n    // Cache hit ratio\n    CacheHitRatio = promauto.NewGaugeVec(\n        prometheus.GaugeOpts{\n            Name: "site_availability_cache_hit_ratio",\n            Help: "Cache hit ratio",\n        },\n        []string{"cache_type"},\n    )\n)\n\n// Usage in application code\nfunc recordMetrics(app, location string, responseTime float64, statusCode int) {\n    ApplicationResponseTime.WithLabelValues(\n        app,\n        location,\n        fmt.Sprintf("%d", statusCode),\n    ).Observe(responseTime)\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"instrumenting-code",children:"Instrumenting Code"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// Example: Instrument HTTP handlers\nfunc instrumentHandler(handler http.HandlerFunc) http.HandlerFunc {\n    return promhttp.InstrumentHandlerDuration(\n        prometheus.NewHistogramVec(\n            prometheus.HistogramOpts{\n                Name: "http_request_duration_seconds",\n                Help: "HTTP request duration",\n            },\n            []string{"method", "path", "status"},\n        ),\n        handler,\n    )\n}\n\n// Example: Instrument scraping operations\nfunc (s *Scraper) instrumentedScrape(target string) error {\n    timer := prometheus.NewTimer(prometheus.ObserverFunc(func(v float64) {\n        ScrapeDuration.WithLabelValues(target).Observe(v)\n    }))\n    defer timer.ObserveDuration()\n\n    err := s.scrape(target)\n\n    status := "success"\n    if err != nil {\n        status = "error"\n    }\n\n    ScrapeRequests.WithLabelValues(target, status).Inc()\n\n    return err\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"observability-best-practices",children:"Observability Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"metric-naming",children:"Metric Naming"}),"\n",(0,a.jsx)(n.p,{children:"Follow Prometheus naming conventions:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"_total"})," suffix for counters"]}),"\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"_seconds"})," suffix for time durations"]}),"\n",(0,a.jsx)(n.li,{children:"Use descriptive names with units"}),"\n",(0,a.jsx)(n.li,{children:"Group related metrics with common prefixes"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"label-best-practices",children:"Label Best Practices"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Keep cardinality low (< 1000 unique combinations)"}),"\n",(0,a.jsx)(n.li,{children:"Use meaningful label names"}),"\n",(0,a.jsx)(n.li,{children:"Avoid high-cardinality labels (user IDs, request IDs)"}),"\n",(0,a.jsx)(n.li,{children:"Be consistent across metrics"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// Use label values caching\nvar httpRequestsCounter = prometheus.NewCounterVec(...)\n\n// Pre-create metric instances for known label combinations\nfunc init() {\n    for _, method := range []string{"GET", "POST", "PUT", "DELETE"} {\n        for _, path := range knownPaths {\n            httpRequestsCounter.WithLabelValues(method, path)\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"monitoring-the-monitor",children:"Monitoring the Monitor"}),"\n",(0,a.jsx)(n.p,{children:"Monitor Site Availability Monitoring itself:"}),"\n",(0,a.jsx)(n.h3,{id:"self-monitoring-metrics",children:"Self-Monitoring Metrics"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-prometheus",children:'# Monitor scraping health\nup{job="site-availability"} 1\n\n# Monitor response times\nprometheus_rule_evaluation_duration_seconds{rule_group="site_availability_rules"}\n\n# Monitor disk usage\nprometheus_tsdb_symbol_table_size_bytes\n'})}),"\n",(0,a.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# Kubernetes liveness probe\nlivenessProbe:\n  httpGet:\n    path: /health\n    port: 8080\n  initialDelaySeconds: 30\n  periodSeconds: 10\n\n# Kubernetes readiness probe\nreadinessProbe:\n  httpGet:\n    path: /metrics\n    port: 8080\n  initialDelaySeconds: 5\n  periodSeconds: 5\n"})}),"\n",(0,a.jsx)(n.p,{children:"This comprehensive metrics integration ensures full observability of your Site Availability Monitoring system and the applications it monitors."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);